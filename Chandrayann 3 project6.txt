import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'C:\Users\patid\Desktop\Python\Data set Part 2 - propulsion_module (1).csv ')
print(df)

data = {
    "Parameter":
        [
            "Lunar Polar Orbit",
            "Mission life",
            "Structure ",
            "Dry Mass",
            "Propellant Mass",
            "Total PM Mass",
            "Power Generation",
            "Communication",
            " Attitude Sensors",
            "Propulsion System "
            
        ],
        
    "Specifications":
        [
            "From 170 x 36500 km to lunar polar orbit",
            "Carrying Lander Module & Rover upto ~100 x 100.",
            "Modified version of I-3 K",
            "448.62 kg (including pressurant)",
            "1696.39 kg",
            " 2145.01 kg",
            " 738 W, Summer solistices and with bias",
            "S-Band Transponder (TTC) â€“ with IDSN",
            "CASS, IRAP, Micro star sensor",
            "Bi-Propellant Propulsion System (MMH + MON3)"
            
        ]
}
df = pd.DataFrame(data)
print(df)
data = {
    "Parameter":
        [
            "Mission life",
            "Mass",
            "Power",
            "Payloads",
            "Dimensions (mm3)",
            "Communication",
            "Landing site"
            
        ],
        "Specification":
            [
                "1 Lunar day (14 Earth days)",
                "1749.86 kg including Rover",
                " 738 W (Winter solstice)",
                "3",
                "2000 x 2000 x 1166",
                "ISDN, Ch-2 Orbiter, Rover",
                " 69.367621 S, 32.348126 E"
                
            ]
}
lander_df = pd.DataFrame(data)
print(lander_df)

data = {
    "Parameter":
        [
            "Mission Life",
            " Mass",
            "Power",
            "Payloads",
            "Dimensions (mm3)",
            "Communication"
            
        
             ],
        "Specification":
            [
                " 1 Lunar day",
                " 26 kg",
                " 50 W",
                "2",
                " 917 x 750 x 397",
                " Lander"
                
            ]
}
rover_df = pd.DataFrame(data)
print(rover_df)
   
   
   
def extract_numerical_value(spec):
    numeric_pattern = r'(\d+(\.\d+)?)'
    custom_numeric_pattern = r"[-+]?[.]?[\d]+(?:,\d\d\d)*[\.]?\d*(?:[eE][-+]?\d+)?"
    combined_pattern = f"({numeric_pattern} | {custom_numeric_pattern})"
    matches = re.findall(combined_pattern, spec)
    if matches:
        return float(matches[0][0])
    else:
        return None
    
import re
df["numeric_value"] = df["Specifications"].apply(extract_numerical_value)
print(df)

lander_df["numeric_value"] = df["Specifications"].apply(extract_numerical_value)
print(lander_df)

rover_df["numeric_value"] = df["Specifications"].apply(extract_numerical_value)
print(rover_df)

import math
rover_mass = 26
lander_dry_mass = 1749.86
total_mass = rover_mass  + lander_dry_mass
delta_v_required = 1500
isp_lander_engines = 300
propellant_mass_required = total_mass*(delta_v_required/isp_lander_engines)
propellant_mass_required = round(propellant_mass_required, 2)

rover_power_requirement = 50
lander_battery_capacity = 2000
rover_operating_time_hours = lander_battery_capacity/rover_power_requirement
print("Mass Budget:")
print(f"Lander mass: {lander_dry_mass} kg")
print(f"Rover mass: {rover_mass} kg")
print(f"Propellant mass required: {propellant_mass_required} kg (matches value)")
print("\nPower Budget:")
print(f"Rover power requirement: {rover_power_requirement} W")
print(f"Lander battery capacity: {lander_battery_capacity} Wh")
print(f"Rover can operate for {rover_operating_time_hours:2f} hours on stored")
print("\nMobility Assessment:")
print("Low mass of the rover allows for mobility on uneven lunar surface")
print("Number of payloads for science measurments is 2")


import matplotlib.pyplot as plt
labels = ['Lander Dry Mass', 'rover_mass','Propellant Mass']
mass_values = [lander_dry_mass, rover_mass, propellant_mass_required]
plt.figure(figsize=(8,6))
plt.bar(labels, mass_values, color = ['blue', 'pink', 'red'])
plt.xlabel('Components')
plt.ylabel('Mass (kg)')
plt.title('Mass Budget')
plt.ylim(0, max(mass_values)* 1.2)

for i, v in enumerate(mass_values):
    plt.text(i, v, str(v), ha = 'center', va = 'bottom')
plt.show()

labels = ['Rover Power Requirement', 'Lander Battery Capacity']
power_values = [rover_power_requirement, lander_battery_capacity]
plt.figure(figsize=(8,6))
plt.bar(labels, power_values, color = ['blue', 'green'])
plt.xlabel('Components')
plt.ylabel('Power (Watt-hours)')
plt.title('Power Budget')
plt.ylim(0, max(power_values)* 1.2)

for i, v in enumerate(power_values):
    plt.text(i, v, str(v), ha = 'center', va = 'bottom')
plt.show()

import plotly.express as px
mass_labels = ['Lander Dry Mass', 'Rover Mass', 'Propellant Mass']
mass_values = [lander_dry_mass, rover_mass,propellant_mass_required]
mass_fig = px.bar(x = mass_labels, y = mass_values, color=mass_labels,
                  labels={'x': 'Component', 'y': 'Mass(kg)'},
                  title = 'Mass Budget')
mass_fig.update_traces(texttemplate='%{y:.2f} kg', textposition = 'outside')
mass_fig.show()


power_labels = ['Rover Power Requiremnet', 'Lander Battery Capacity']
power_values = [rover_power_requirement, lander_battery_capacity]
power_fig = px.bar(x = power_labels, y = power_values, color = power_labels,
                    labels={'x': 'Component', 'y': 'Power (Watt-hours)'},
                    
                  title = 'Power Budget')
power_fig.update_traces(texttemplate='%{y:.2f} wh', textposition = 'outside')
power_fig.show()


mass_fig = px.pie(names = mass_labels, values = mass_values, title = 'Mass Budget')
mass_fig.show()

power_fig = px.pie(names = power_labels, values = power_values, title = 'Power Budget')
power_fig.show()

plt.figure(figsize=(20,20))
plt.pie(mass_values, labels = mass_labels, autopct='%1.1f%%', startangle=140)
plt.title = ('Mass Budget')
plt.axis = ('equal')
plt.show()

plt.figure(figsize=(8,8))
plt.pie(power_values, labels = power_labels, autopct='%1.1f%%', startangle=140)
plt.title = ('Power Budget')
plt.axis = ('equal')
plt.show()

